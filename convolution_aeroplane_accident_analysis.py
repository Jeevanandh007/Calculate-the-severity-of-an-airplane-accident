# -*- coding: utf-8 -*-
"""Convolution aeroplane accident analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KD2bQffnRSotRiTySJ9rHkn4-bgwUQsf
"""

import pandas as pd
import numpy as np
dataset_train = pd.read_csv('train.csv')
dataset_train.head()

x = dataset_train.drop(['Severity'] , axis = 1)
y= dataset_train['Severity']
x=x.drop(['Accident_ID'],axis=1)

x.head()

y

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)
y

x

from sklearn.model_selection import train_test_split
x , x_test , y , y_test = train_test_split(x, y , test_size = 0.15 , random_state=0)

from sklearn.preprocessing import StandardScaler
sc_x = StandardScaler()
x = sc_x.fit_transform(x)
x_test  = sc_x.transform(x_test)

#TRAINING

import tensorflow as tf

from keras import Sequential
from keras.layers import Dense

classifier=Sequential()

classifier = tf.keras.Sequential([
    tf.keras.layers.Dense(500 , activation = 'relu' , input_dim = 10),
    tf.keras.layers.Dense(300 , activation = 'relu'),
    tf.keras.layers.Dense(100 , activation = 'relu'),
    tf.keras.layers.Dense(50 , activation = 'relu'),
    tf.keras.layers.Dense(4, activation = 'softmax')
])

classifier.summary()

classifier.compile(loss = 'sparse_categorical_crossentropy',
                 optimizer = 'adam',
                 metrics = ['accuracy'])

classifier.fit(x , y, batch_size = 16, epochs = 50 )

#TESTING DATA TO BE PREDICTED

test_dataset = pd.read_csv('test.csv')
test_x = test_dataset.drop(['Accident_ID'] , axis = 1)
test_x.head()

#STANDARDISE DATA TO BE PREDICTED


#test_x to test_x1

test_x1 = sc_x.transform(test_x)

test_x1

pred2=classifier.predict(test_x1)
pred2

np.shape(pred2)

contents = []
for x in pred2:    
    contents.append(x.argmax())

d = {0 : 'Highly_Fatal_And_Damaging', 1 : 'Minor_Damage_And_Injuries', 2: 'Significant_Damage_And_Fatalities', 3:'Significant_Damage_And_Serious_Injuries'}

final_1 = []
for i in contents:
    final_1.append(d[i])

final_1

output = pd.DataFrame({'Accident_ID': test_dataset.Accident_ID, 'Severity': final_1})
output.to_csv('my_submission.csv', index=False)